# Flutter Alarm Implementation Based on Remote Start Date

Building on the previous notification solution, here's how to implement alarms that trigger at specific times based on a `start_date` from your remote database.

## Solution Overview

1. **Alarm Package Selection**: For reliable alarms (including when app is closed), we'll use `android_alarm_manager_plus` for Android and `flutter_local_notifications` for iOS.
2. **Data Flow**: Fetch `start_date` and any alarm times from your remote database, then schedule alarms accordingly.
3. **Storage**: Continue using SharedPreferences to track scheduled alarms.

## Implementation

### 1. Add Dependencies

Update your `pubspec.yaml`:
```yaml
dependencies:
  android_alarm_manager_plus: ^3.0.0
  flutter_local_notifications: ^14.1.0
  shared_preferences: ^2.2.0
  http: ^0.13.5
  intl: ^0.18.1
  timezone: ^0.9.2  # For timezone support
```

### 2. Alarm Service Implementation

```dart
import 'dart:async';
import 'package:android_alarm_manager_plus/android_alarm_manager_plus.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz_data;
import 'package:http/http.dart' as http;

class AlarmService {
  static final AlarmService _instance = AlarmService._internal();
  factory AlarmService() => _instance;
  AlarmService._internal();

  final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    tz_data.initializeTimeZones();
    
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    
    final InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: DarwinInitializationSettings(),
    );
    
    await _notificationsPlugin.initialize(initializationSettings);
    
    // Initialize Android Alarm Manager
    await AndroidAlarmManager.initialize();
  }

  // Callback for Android alarms
  static Future<void> alarmCallback(int id, String title, String body) async {
    final notificationService = NotificationService();
    await notificationService.showNotification(title, body);
    
    // You could also trigger a local notification here
    debugPrint('Alarm $id triggered at ${DateTime.now()}');
  }

  Future<void> scheduleAlarm({
    required DateTime alarmTime,
    required int alarmId,
    required String title,
    required String body,
  }) async {
    final now = DateTime.now();
    
    // If alarm time is in the past, don't schedule
    if (alarmTime.isBefore(now)) {
      debugPrint('Alarm time is in the past');
      return;
    }

    // Convert to local timezone
    final location = tz.local;
    final scheduledDate = tz.TZDateTime.from(alarmTime, location);

    // For Android (works even when app is closed)
    await AndroidAlarmManager.oneShotAt(
      scheduledDate,
      alarmId,
      () => alarmCallback(alarmId, title, body),
      exact: true,
      wakeup: true,
      rescheduleOnReboot: true,
    );

    // For iOS (less reliable when app is closed)
    await _notificationsPlugin.zonedSchedule(
      alarmId,
      title,
      body,
      scheduledDate,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'alarm_channel',
          'Alarm Notifications',
          importance: Importance.max,
          priority: Priority.high,
          sound: RawResourceAndroidNotificationSound('alarm_sound'),
        ),
        iOS: DarwinNotificationDetails(
          sound: 'alarm_sound.aiff',
        ),
      ),
      androidAllowWhileIdle: true,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );

    // Store alarm info
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('alarm_$alarmId', alarmTime.toIso8601String());
  }

  Future<void> cancelAlarm(int alarmId) async {
    await AndroidAlarmManager.cancel(alarmId);
    await _notificationsPlugin.cancel(alarmId);
    
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('alarm_$alarmId');
  }

  Future<bool> isAlarmScheduled(int alarmId) async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.containsKey('alarm_$alarmId');
  }
}

class AlarmManager {
  static const String _apiUrl = 'YOUR_API_ENDPOINT';

  Future<void> checkAndScheduleAlarms(BuildContext context) async {
    try {
      // 1. Fetch start_date and alarm times from remote server
      final response = await http.post(
        Uri.parse(_apiUrl),
        // Add your headers and body as needed
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final startDateStr = data['start_date']; // Adjust based on your API
        final alarmTimes = data['alarm_times'] as List<dynamic>; // List of times
        
        final startDate = DateTime.parse(startDateStr);
        final now = DateTime.now();
        
        // 2. Check if start date is today or in the future
        if (startDate.isAfter(now) || 
            startDate.year == now.year && 
            startDate.month == now.month && 
            startDate.day == now.day) {
          
          // 3. Schedule alarms for each time
          for (int i = 0; i < alarmTimes.length; i++) {
            final timeParts = alarmTimes[i].split(':');
            final hour = int.parse(timeParts[0]);
            final minute = int.parse(timeParts[1]);
            
            // Create alarm DateTime
            final alarmTime = DateTime(
              startDate.year,
              startDate.month,
              startDate.day,
              hour,
              minute,
            );
            
            // Check if we've already scheduled this alarm
            final isScheduled = await AlarmService().isAlarmScheduled(i);
            if (!isScheduled) {
              await AlarmService().scheduleAlarm(
                alarmTime: alarmTime,
                alarmId: i,
                title: 'Event Reminder',
                body: 'Your event is starting soon!',
              );
            }
          }
        }
      }
    } catch (e) {
      debugPrint('Error in alarm scheduling: $e');
    }
  }
}
```

### 3. Integration with Your App

Update your main app file to include alarm initialization and checks:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await AlarmService().initialize();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: const HomePage(),
      navigatorObservers: [RouteObserver()],
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> with RouteAware {
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    RouteObserver().subscribe(this, ModalRoute.of(context)!);
  }

  @override
  void dispose() {
    RouteObserver().unsubscribe(this);
    super.dispose();
  }

  @override
  void didPush() {
    _checkAlarms();
  }

  @override
  void didPopNext() {
    _checkAlarms();
  }

  Future<void> _checkAlarms() async {
    await AlarmManager().checkAndScheduleAlarms(context);
    // Also check notifications if needed
    await DateNotificationManager().checkAndShowNotification(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('My App')),
      body: Column(
        children: [
          const Center(child: Text('Home Page')),
          ElevatedButton(
            onPressed: () async {
              // Example of manually scheduling an alarm for testing
              final alarmTime = DateTime.now().add(const Duration(minutes: 1));
              await AlarmService().scheduleAlarm(
                alarmTime: alarmTime,
                alarmId: 999, // Use a high ID for test alarms
                title: 'Test Alarm',
                body: 'This is a test alarm',
              );
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Test alarm scheduled in 1 minute')),
              );
            },
            child: const Text('Schedule Test Alarm'),
          ),
        ],
      ),
    );
  }
}
```

## Key Implementation Notes

1. **Platform-Specific Implementation**:
   - Android uses `android_alarm_manager_plus` for reliable background execution
   - iOS uses `flutter_local_notifications` (more limited when app is closed)

2. **Alarm Scheduling**:
   - Alarms are scheduled based on the `start_date` from your API
   - Each alarm gets a unique ID for management
   - Alarm status is stored in SharedPreferences

3. **Time Zone Handling**:
   - The `timezone` package ensures correct time handling across different timezones

4. **Alarm Types**:
   - One-time alarms (shown in example)
   - Could be extended to repeating alarms if needed

## Recommendations for Production

1. **Error Handling**:
   - Add retry logic for failed API calls
   - Implement proper error logging

2. **Testing**:
   - Test on both Android and iOS
   - Verify behavior when app is closed

3. **Alternatives**:
   - For more complex scheduling, consider Firebase Cloud Messaging with scheduled notifications
   - For iOS, push notifications may be more reliable than local notifications

4. **User Experience**:
   - Add UI to show scheduled alarms
   - Allow users to cancel/modify alarms
   - Provide visual feedback when alarms are set

This implementation gives you a robust alarm system that works with your remote `start_date` and provides reliable notifications on both Android and iOS platforms.